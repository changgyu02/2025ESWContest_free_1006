import rclpy
from rclpy.node import Node
from std_msgs.msg import Bool
from std_srvs.srv import Trigger, SetBool


class TableManagerNode(Node):
    def __init__(self):
        super().__init__('table_manager_node')

        # ✅ 구독자: 주행 완료 신호
        self.drive_done_sub = self.create_subscription(
            Bool,
            '/drive_done',
            self.drive_done_callback,
            10
        )

        # ✅ 서비스 클라이언트 선언
        self.align_client = self.create_client(Trigger, 'table_align_service')
        self.cleaning_client = self.create_client(Trigger, 'table_cleaning_service')
        self.dirt_check_client = self.create_client(SetBool, 'dirt_check_service')
        self.go_home_client = self.create_client(Trigger, 'go_home')

        self.get_logger().info('✅ Table Manager Node initialized.')

    # ✅ 주행 완료 토픽 수신 시 전체 시퀀스 실행
    def drive_done_callback(self, msg):
        if not msg.data:
            return

        self.get_logger().info('🚗 주행 완료 감지됨. 테이블 정렬 및 클리닝 시퀀스를 시작합니다.')
        self.run_sequence()

    # ✅ 전체 시퀀스: 정렬 → 클리닝 → 판단 → 재청소 → 복귀
    def run_sequence(self):
        if not self.call_align_service():
            return

        if not self.call_cleaning_service():
            return

        dirty = self.call_dirt_check_service()
        if dirty:
            self.get_logger().info('🟠 테이블이 여전히 더럽습니다. 한 번 더 클리닝을 수행합니다.')
            if not self.call_cleaning_service():
                return

        self.call_go_home_service()

    # ✅ 테이블 정렬 서비스 호출
    def call_align_service(self):
        if not self.align_client.wait_for_service(timeout_sec=3.0):
            self.get_logger().error('❌ 정렬 서비스 연결 실패.')
            return False

        request = Trigger.Request()
        future = self.align_client.call_async(request)
        rclpy.spin_until_future_complete(self, future)

        if future.result() is not None:
            self.get_logger().info(f'📐 테이블 정렬 완료: {future.result().message}')
            return future.result().success
        else:
            self.get_logger().error('❌ 정렬 요청 실패.')
            return False

    # ✅ 클리닝 서비스 호출
    def call_cleaning_service(self):
        if not self.cleaning_client.wait_for_service(timeout_sec=3.0):
            self.get_logger().error('❌ 클리닝 서비스 연결 실패.')
            return False

        request = Trigger.Request()
        future = self.cleaning_client.call_async(request)
        rclpy.spin_until_future_complete(self, future)

        if future.result() is not None:
            self.get_logger().info('✅ 클리닝 완료.')
            return future.result().success
        else:
            self.get_logger().error('❌ 클리닝 요청 실패.')
            return False

    # ✅ 오염도 판단 서비스 호출
    def call_dirt_check_service(self):
        if not self.dirt_check_client.wait_for_service(timeout_sec=3.0):
            self.get_logger().error('❌ 오염도 판단 서비스 연결 실패.')
            return False

        request = SetBool.Request()
        request.data = True
        future = self.dirt_check_client.call_async(request)
        rclpy.spin_until_future_complete(self, future)

        if future.result() is not None:
            is_dirty = future.result().success
            self.get_logger().info(f'🔍 오염도 판단 결과: {"더러움" if is_dirty else "깨끗함"}')
            return is_dirty
        else:
            self.get_logger().error('❌ 오염도 판단 실패.')
            return False

    # ✅ 원점 복귀 서비스 호출
    def call_go_home_service(self):
        if not self.go_home_client.wait_for_service(timeout_sec=3.0):
            self.get_logger().error('❌ 원점 복귀 서비스 연결 실패.')
            return

        request = Trigger.Request()
        future = self.go_home_client.call_async(request)
        rclpy.spin_until_future_complete(self, future)

        if future.result() is not None:
            self.get_logger().info(f'🏁 원점 복귀 완료: {future.result().message}')
        else:
            self.get_logger().error('❌ 원점 복귀 요청 실패.')


def main(args=None):
    rclpy.init(args=args)
    node = TableManagerNode()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()
