import rclpy
from rclpy.node import Node
from std_srvs.srv import SetBool
import torch
from torchvision import transforms
import cv2
from PIL import Image

class DirtCheckNode(Node):
    def __init__(self):
        super().__init__('dirt_check_node')

        self.declare_parameter('model_path', 'model/dirt_classifier.pt')
        model_path = self.get_parameter('model_path').get_parameter_value().string_value

        # 클래스 이름 정의
        self.class_names = ['clean_table', 'dirty_table']

        # 모델 로드
        self.model = torch.load(model_path, map_location=torch.device('cpu'))
        self.model.eval()

        # 전처리 정의
        self.transform = transforms.Compose([
            transforms.Resize((640, 640)),
            transforms.ToTensor(),
        ])

        # 웹캠 초기화
        self.cap = cv2.VideoCapture(0)
        if not self.cap.isOpened():
            self.get_logger().error('❌ 카메라 열기 실패')
            exit()

        # 서비스 서버 생성
        self.srv = self.create_service(SetBool, 'dirt_check_service', self.handle_dirt_check)
        self.get_logger().info('🧪 dirt_check_node 시작 (서비스 서버 기반)')

    def handle_dirt_check(self, request, response):
        self.get_logger().info('📥 오염도 판단 요청 수신')

        ret, frame = self.cap.read()
        if not ret:
            self.get_logger().error('❌ 카메라 프레임 읽기 실패')
            response.success = False
            response.message = '프레임 읽기 실패'
            return response

        # OpenCV → PIL 변환
        image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        image = Image.fromarray(image)

        # 전처리 후 모델 추론
        input_tensor = self.transform(image).unsqueeze(0)  # [1, 3, 640, 640]
        with torch.no_grad():
            outputs = self.model(input_tensor)
            probabilities = torch.nn.functional.softmax(outputs[0], dim=0)
            predicted_idx = torch.argmax(probabilities).item()
            predicted_label = self.class_names[predicted_idx]
            confidence = probabilities[predicted_idx].item()

        # 판단 결과 출력
        self.get_logger().info(f'🔍 분류 결과: {predicted_label} ({confidence*100:.2f}%)')

        response.success = (predicted_label == 'dirty_table')  # True이면 더럽다는 의미
        response.message = f'{predicted_label} ({confidence*100:.2f}%)'
        return response

    def destroy_node(self):
        self.cap.release()
        super().destroy_node()

def main(args=None):
    rclpy.init(args=args)
    node = DirtCheckNode()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        node.get_logger().info('🛑 종료 요청 수신')
    node.destroy_node()
    rclpy.shutdown()
